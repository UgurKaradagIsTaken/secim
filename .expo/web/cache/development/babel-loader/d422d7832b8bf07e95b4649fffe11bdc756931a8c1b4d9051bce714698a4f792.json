{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/yavuzceliker/Desktop/projects/yavuz/react/qr4car/mobile/app/navigation/index.js\",\n  _this = this;\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport React, { useCallback, useEffect } from \"react\";\nimport Auth from \"./shared/auth\";\nimport SharedScreens from \"./shared/shared-screens\";\nimport TabMasterStack from \"./tab\";\nimport useUserInfo, { useObserveQuery } from \"../utils/hooks/use-userinfo\";\nimport { onlineManager, useQueryClient } from 'react-query';\nimport navigationService from \"./navigation-service\";\nimport AppRoutes from \"../utils/app-routes\";\nimport useRefState from \"../utils/hooks/use-ref-state\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ApiTypeEnum from \"../infrastructure/api-calls/api-type-enum\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Navigation = function Navigation(_ref) {\n  var initialRoute = _ref.initialRoute;\n  var _useRefState = useRefState(false),\n    _useRefState2 = _slicedToArray(_useRefState, 3),\n    isLogin = _useRefState2[0],\n    isLoginRef = _useRefState2[1],\n    setIsLogin = _useRefState2[2];\n  var _useRefState3 = useRefState(null),\n    _useRefState4 = _slicedToArray(_useRefState3, 3),\n    nav = _useRefState4[0],\n    navRef = _useRefState4[1],\n    setNav = _useRefState4[2];\n  var queryClient = useQueryClient();\n  var onChangeState = useCallback(function (state) {\n    var _navRef$current, _navRef$current$getCu;\n    var currentPage = (_navRef$current = navRef.current) == null ? void 0 : (_navRef$current$getCu = _navRef$current.getCurrentRoute()) == null ? void 0 : _navRef$current$getCu.name;\n    queryClient.setQueryData('currentPage', currentPage);\n  }, []);\n  var Stack = createNativeStackNavigator();\n  return _jsxDEV(NavigationContainer, {\n    onStateChange: onChangeState,\n    ref: function ref(_ref2) {\n      navigationService.setTopLevelNavigator(_ref2);\n      setNav(_ref2);\n    },\n    children: _jsxDEV(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      initialRouteName: initialRoute,\n      children: [isLogin ? _jsxDEV(Stack.Screen, {\n        name: AppRoutes.Home.name,\n        component: TabMasterStack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, _this) : _jsxDEV(Stack.Screen, {\n        name: AppRoutes.Auth.name,\n        component: Auth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, _this), SharedScreens]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, _this);\n};\nexport default Navigation;","map":{"version":3,"names":["NavigationContainer","createNativeStackNavigator","React","useCallback","useEffect","Auth","SharedScreens","TabMasterStack","useUserInfo","useObserveQuery","onlineManager","useQueryClient","navigationService","AppRoutes","useRefState","Text","ApiTypeEnum","jsxDEV","_jsxDEV","Navigation","_ref","initialRoute","_useRefState","_useRefState2","_slicedToArray","isLogin","isLoginRef","setIsLogin","_useRefState3","_useRefState4","nav","navRef","setNav","queryClient","onChangeState","state","_navRef$current","_navRef$current$getCu","currentPage","current","getCurrentRoute","name","setQueryData","Stack","onStateChange","ref","setTopLevelNavigator","children","Navigator","screenOptions","headerShown","initialRouteName","Screen","Home","component","fileName","_jsxFileName","lineNumber","columnNumber","_this"],"sources":["/Users/yavuzceliker/Desktop/projects/yavuz/react/qr4car/mobile/app/navigation/index.js"],"sourcesContent":["import { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport React, { useCallback, useEffect } from \"react\";\nimport Auth from \"./shared/auth\";\nimport SharedScreens from \"./shared/shared-screens\";\nimport TabMasterStack from \"./tab\";\nimport useUserInfo, { useObserveQuery } from \"../utils/hooks/use-userinfo\";\nimport { onlineManager, useQueryClient } from 'react-query';\nimport navigationService from \"./navigation-service\";\nimport AppRoutes from \"../utils/app-routes\";\nimport useRefState from \"../utils/hooks/use-ref-state\";\nimport { Text } from \"react-native\";\nimport ApiTypeEnum from \"../infrastructure/api-calls/api-type-enum\";\nconst Navigation = ({ initialRoute }) => {\n  const [isLogin, isLoginRef, setIsLogin] = useRefState(false);\n  const [nav, navRef, setNav] = useRefState(null);\n  const queryClient = useQueryClient();\n\n  const onChangeState = useCallback((state) => {\n    const currentPage = navRef.current?.getCurrentRoute()?.name;\n    queryClient.setQueryData('currentPage', currentPage);\n  }, []);\n  const Stack = createNativeStackNavigator();\n\n  \n\n  return (\n    <NavigationContainer\n      onStateChange={onChangeState}\n      ref={(ref) => {\n        navigationService.setTopLevelNavigator(ref);\n        setNav(ref);\n      }}\n    >\n      <Stack.Navigator\n        screenOptions={{ headerShown: false }}\n        initialRouteName={initialRoute}\n      >\n        {isLogin\n          ? <Stack.Screen name={AppRoutes.Home.name} component={TabMasterStack} />\n          : <Stack.Screen name={AppRoutes.Auth.name} component={Auth} />\n        }\n        {SharedScreens}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default Navigation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}