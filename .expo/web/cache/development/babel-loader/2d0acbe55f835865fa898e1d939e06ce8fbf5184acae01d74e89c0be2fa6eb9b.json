{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { DevToolsPluginClientImplApp } from './DevToolsPluginClientImplApp';\nimport { DevToolsPluginClientImplBrowser } from './DevToolsPluginClientImplBrowser';\nimport { getConnectionInfo } from './getConnectionInfo';\nvar instanceMap = {};\nexport function createDevToolsPluginClient(_x) {\n  return _createDevToolsPluginClient.apply(this, arguments);\n}\nfunction _createDevToolsPluginClient() {\n  _createDevToolsPluginClient = _asyncToGenerator(function* (connectionInfo) {\n    var client;\n    if (connectionInfo.sender === 'app') {\n      client = new DevToolsPluginClientImplApp(connectionInfo);\n    } else {\n      client = new DevToolsPluginClientImplBrowser(connectionInfo);\n    }\n    yield client.initAsync();\n    return client;\n  });\n  return _createDevToolsPluginClient.apply(this, arguments);\n}\nexport function getDevToolsPluginClientAsync(_x2) {\n  return _getDevToolsPluginClientAsync.apply(this, arguments);\n}\nfunction _getDevToolsPluginClientAsync() {\n  _getDevToolsPluginClientAsync = _asyncToGenerator(function* (pluginName) {\n    var connectionInfo = getConnectionInfo();\n    var instance = instanceMap[pluginName];\n    if (instance != null) {\n      if (instance instanceof Promise) {\n        return instance;\n      }\n      if (instance.isConnected() === false || instance.connectionInfo.devServer !== connectionInfo.devServer) {\n        yield instance.closeAsync();\n        delete instanceMap[pluginName];\n        instance = null;\n      }\n    }\n    if (instance == null) {\n      var instancePromise = createDevToolsPluginClient(_objectSpread(_objectSpread({}, connectionInfo), {}, {\n        pluginName: pluginName\n      }));\n      instanceMap[pluginName] = instancePromise;\n      instance = yield instancePromise;\n      instanceMap[pluginName] = instance;\n    }\n    return instance;\n  });\n  return _getDevToolsPluginClientAsync.apply(this, arguments);\n}\nexport function cleanupDevToolsPluginInstances() {\n  for (var pluginName of Object.keys(instanceMap)) {\n    var instance = instanceMap[pluginName];\n    delete instanceMap[pluginName];\n    if (instance instanceof Promise) {\n      instance.then(function (instance) {\n        return instance.closeAsync();\n      });\n    } else {\n      instance.closeAsync();\n    }\n  }\n}","map":{"version":3,"names":["DevToolsPluginClientImplApp","DevToolsPluginClientImplBrowser","getConnectionInfo","instanceMap","createDevToolsPluginClient","_x","_createDevToolsPluginClient","apply","arguments","_asyncToGenerator","connectionInfo","client","sender","initAsync","getDevToolsPluginClientAsync","_x2","_getDevToolsPluginClientAsync","pluginName","instance","Promise","isConnected","devServer","closeAsync","instancePromise","_objectSpread","cleanupDevToolsPluginInstances","Object","keys","then"],"sources":["/Users/yavuzceliker/Desktop/projects/yavuz/react/qr4car/mobile/node_modules/expo/src/devtools/DevToolsPluginClientFactory.ts"],"sourcesContent":["import type { DevToolsPluginClient } from './DevToolsPluginClient';\nimport { DevToolsPluginClientImplApp } from './DevToolsPluginClientImplApp';\nimport { DevToolsPluginClientImplBrowser } from './DevToolsPluginClientImplBrowser';\nimport type { ConnectionInfo } from './devtools.types';\nimport { getConnectionInfo } from './getConnectionInfo';\n\nconst instanceMap: Record<string, DevToolsPluginClient | Promise<DevToolsPluginClient>> = {};\n\n/**\n * Factory of DevToolsPluginClient based on sender types.\n * @hidden\n */\nexport async function createDevToolsPluginClient(\n  connectionInfo: ConnectionInfo\n): Promise<DevToolsPluginClient> {\n  let client: DevToolsPluginClient;\n  if (connectionInfo.sender === 'app') {\n    client = new DevToolsPluginClientImplApp(connectionInfo);\n  } else {\n    client = new DevToolsPluginClientImplBrowser(connectionInfo);\n  }\n  await client.initAsync();\n  return client;\n}\n\n/**\n * Public API to get the DevToolsPluginClient instance.\n */\nexport async function getDevToolsPluginClientAsync(\n  pluginName: string\n): Promise<DevToolsPluginClient> {\n  const connectionInfo = getConnectionInfo();\n\n  let instance: DevToolsPluginClient | Promise<DevToolsPluginClient> | null =\n    instanceMap[pluginName];\n  if (instance != null) {\n    if (instance instanceof Promise) {\n      return instance;\n    }\n    if (\n      instance.isConnected() === false ||\n      instance.connectionInfo.devServer !== connectionInfo.devServer\n    ) {\n      await instance.closeAsync();\n      delete instanceMap[pluginName];\n      instance = null;\n    }\n  }\n  if (instance == null) {\n    const instancePromise = createDevToolsPluginClient({ ...connectionInfo, pluginName });\n    instanceMap[pluginName] = instancePromise;\n    instance = await instancePromise;\n    instanceMap[pluginName] = instance;\n  }\n  return instance;\n}\n\n/**\n * Internal testing API to cleanup all DevToolsPluginClient instances.\n */\nexport function cleanupDevToolsPluginInstances() {\n  for (const pluginName of Object.keys(instanceMap)) {\n    const instance = instanceMap[pluginName];\n    delete instanceMap[pluginName];\n    if (instance instanceof Promise) {\n      instance.then((instance) => instance.closeAsync());\n    } else {\n      instance.closeAsync();\n    }\n  }\n}\n"],"mappings":";;;;AACA,SAASA,2BAA2B,QAAQ,+BAA+B;AAC3E,SAASC,+BAA+B,QAAQ,mCAAmC;AAEnF,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD,IAAMC,WAAW,GAAyE,EAAE;AAM5F,gBAAsBC,0BAA0BA,CAAAC,EAAA;EAAA,OAAAC,2BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAW/C,SAAAF,4BAAA;EAAAA,2BAAA,GAAAG,iBAAA,CAXM,WACLC,cAA8B;IAE9B,IAAIC,MAA4B;IAChC,IAAID,cAAc,CAACE,MAAM,KAAK,KAAK,EAAE;MACnCD,MAAM,GAAG,IAAIX,2BAA2B,CAACU,cAAc,CAAC;KACzD,MAAM;MACLC,MAAM,GAAG,IAAIV,+BAA+B,CAACS,cAAc,CAAC;;IAE9D,MAAMC,MAAM,CAACE,SAAS,EAAE;IACxB,OAAOF,MAAM;EACf,CAAC;EAAA,OAAAL,2BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAKD,gBAAsBM,4BAA4BA,CAAAC,GAAA;EAAA,OAAAC,6BAAA,CAAAT,KAAA,OAAAC,SAAA;AAAA;AA2BjD,SAAAQ,8BAAA;EAAAA,6BAAA,GAAAP,iBAAA,CA3BM,WACLQ,UAAkB;IAElB,IAAMP,cAAc,GAAGR,iBAAiB,EAAE;IAE1C,IAAIgB,QAAQ,GACVf,WAAW,CAACc,UAAU,CAAC;IACzB,IAAIC,QAAQ,IAAI,IAAI,EAAE;MACpB,IAAIA,QAAQ,YAAYC,OAAO,EAAE;QAC/B,OAAOD,QAAQ;;MAEjB,IACEA,QAAQ,CAACE,WAAW,EAAE,KAAK,KAAK,IAChCF,QAAQ,CAACR,cAAc,CAACW,SAAS,KAAKX,cAAc,CAACW,SAAS,EAC9D;QACA,MAAMH,QAAQ,CAACI,UAAU,EAAE;QAC3B,OAAOnB,WAAW,CAACc,UAAU,CAAC;QAC9BC,QAAQ,GAAG,IAAI;;;IAGnB,IAAIA,QAAQ,IAAI,IAAI,EAAE;MACpB,IAAMK,eAAe,GAAGnB,0BAA0B,CAAAoB,aAAA,CAAAA,aAAA,KAAMd,cAAc;QAAEO,UAAU,EAAVA;MAAU,EAAE,CAAC;MACrFd,WAAW,CAACc,UAAU,CAAC,GAAGM,eAAe;MACzCL,QAAQ,SAASK,eAAe;MAChCpB,WAAW,CAACc,UAAU,CAAC,GAAGC,QAAQ;;IAEpC,OAAOA,QAAQ;EACjB,CAAC;EAAA,OAAAF,6BAAA,CAAAT,KAAA,OAAAC,SAAA;AAAA;AAKD,OAAM,SAAUiB,8BAA8BA,CAAA;EAC5C,KAAK,IAAMR,UAAU,IAAIS,MAAM,CAACC,IAAI,CAACxB,WAAW,CAAC,EAAE;IACjD,IAAMe,QAAQ,GAAGf,WAAW,CAACc,UAAU,CAAC;IACxC,OAAOd,WAAW,CAACc,UAAU,CAAC;IAC9B,IAAIC,QAAQ,YAAYC,OAAO,EAAE;MAC/BD,QAAQ,CAACU,IAAI,CAAC,UAACV,QAAQ;QAAA,OAAKA,QAAQ,CAACI,UAAU,EAAE;MAAA,EAAC;KACnD,MAAM;MACLJ,QAAQ,CAACI,UAAU,EAAE;;;AAG3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}